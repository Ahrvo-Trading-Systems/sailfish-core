/******************************************************************************
 * Copyright 2009-2019 Exactpro (Exactpro Systems Limited)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
 
 /*	To get production build files, run './gradlew build'.
*	Files will be located at build folder (index.html and bundle.js)
*/
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
  dependencies {
      classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
  }
}

apply plugin: 'com.moowork.node'

ext {
    node_modules    = file("node_modules")
    npmPackageInfo  = file("package.json")
    npmDir          = file("${project.buildDir}/nodejs")
}

archivesBaseName = 'sailfish-js-report'

defaultTasks 'zipData'

node {
    version = '10.1.0'
    npmVersion = '6.10.3'
    distBaseUrl = 'http://nodejs.org/dist'
    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true

    workDir = npmDir
}

task installDependencies(type: NpmTask) {
    // running 'npm ci', same as 'npm install', but uses package-lock.json instead of package.json
    args = ['ci']
}

task buildProd(type: NpmTask, dependsOn: ['installDependencies', 'runTests']) {
	args = ['run', 'build']
}

task buildDev(type: NpmTask, dependsOn: 'installDependencies') {
	args = ['run', 'dev-build']
}

task devServer(type: NpmTask, dependsOn: 'installDependencies') {
	args = ['start']
}

task runTests(type: NpmTask, dependsOn: 'installDependencies') {
    args = ['test']
}

task zipData(type: Zip, dependsOn: 'buildProd') {
    classifier = "data"

    includeEmptyDirs = false
    duplicatesStrategy = 'EXCLUDE'

    from file("${project.buildDir}/out")
}

clean {
    delete project.buildDir
    delete node_modules
}

task install (overwrite: true, type: Upload) {
    repositories.mavenInstaller {
        pom.version = project.version
        pom.artifactId = project.archivesBaseName
        pom.groupId = project.group
        pom.packaging = 'zip'
    }
    configuration = project.configurations.getByName(Dependency.ARCHIVES_CONFIGURATION)
}

artifacts {
    archives(zipData)
}
